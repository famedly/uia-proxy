logging:
  console: info

# Webserver config
webserver:
  # The host where the webserver should listen to
  host: localhost
  # The port where the webserver should listen to
  port: 9740

# username mapper config
usernameMapper:
  # In which mode to operate, can be "plain" or "hmac-sha256"
  mode: hmac-sha256
  # the pepper to hash the usernames with
  pepper: <random secret>
  # the database folder for levelup
  folder: ./usernamemap

# The homeserver config
homeserver:
  # Domain of the homeserver
  domain: famedly.de
  # The reachable, local, URL of the homeserver
  url: http://localhost:8008
  # token config for the login-tokens of the homeserver
  token:
    # The shared secret for those tokens
    secret: <random secret>
    # The algorithm used for those tokens
    algorithm: HS512

# Stage template config (optional)
# Stages set here can be re-used later on in the uia config
stages:
  password: # The key is at the same time the alias of the stage
    type: m.login.password # The type of this stage
    config: # The config for this stage. Depends on stage type
      # m.login.password configures password providers
      passwordproviders:
        # Use the ldap password provider
        ldap:
          # the URL ldap is reachable at
          url: ldap://localhost
          # the base DN of the ldap
          base: dc=localhost,dc=localdomain,
          # the DN of the search user to initially bind with
          bindDn: uid=search,ou=users,dc=localhost,dc=localdomain
          # the bind password of the seach user
          bindPassword: super secret
          # the attribute mapping of the ldap
          attributes:
            # the username for people to log in as
            uid: uid
            # the persistent ID to create the mxid hashes of
            persistentId: persistentId
            enabled: enabled
  # More stage templates could be defined here, if wanted

# UIA template config (optional)
# Templates here can be re-used later on in the uia config
templates:
  password_only: # The key is at the same time the alias of the template
    # the config for this UIA template
    stages:
      password: # you can re-use stage templates here
    flows:
      - stages:
        - m.login.password

# Here we configure the different UIA endpoints
uia:
  # Config for the /login endpoint
  login:
    # Rate limit configruation for this endpoint
    rateLimit:
      # if rate limiting is enabled
      enabled: true
      # the window in ms for the rate limiting to happen
      windowMs: 60000
      # how many maximum hits in that window are allowed
      max: 5
    # All the stages needed to complete to fullfill UIA
    stages:
      # Here we use a stage tempalte from above. Note that it is still an object.
      # If we were to define any properties on this object we'd override the above config
      password:
      # And here we define a new stage inline, without using the stage templates
      m.login.dummy:
        # and, just as an example (m.login.dummy doesn't take any config), here is a config option
        #foo: bar
    # And now here is the config for all the different flows possible
    flows:
      - stages:
        # First we want the user to fullfill the password flow
        - m.login.password
        # Next we want the user to fullfill the dummy flow
        - m.login.dummy
  # Config for the password changing endpoint
  password:
    # we use a template defined in the "templates" section here
    password_only:
  # Instead of defining the config for every single endpoint, we just
  # define a default and use that
  default:
    password_only:
#  deleteDevice:
#    password_only:
#  deleteDevices:
#    password_only:
#  uploadDeviceSigningKeys:
#    password_only:
