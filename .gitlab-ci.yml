image: node:latest

stages:
  - build
  - lint
  - test
  - build_docker

cache:
  paths:
    - node_modules/
    - build/

build:
  # Npm install / npm run build this thing
  stage: build
  script:
    - npm install
    - npm run build
  artifacts:
    when: always
    paths:
      - node_modules/
      - build/

lint:
  # Verify the linting
  stage: lint
  script:
    - npm run lint

test:
  # Run the tests
  stage: test
  script:
    - npm run test

.docker: &docker_template
  image: docker:latest
  stage: build_docker
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

docker-releases:
  <<: *docker_template
  script:
    - docker build --pull -t "${CI_REGISTRY_IMAGE}:latest" -t "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}" .
    - docker push "${CI_REGISTRY_IMAGE}:latest"
    - docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'

docker-tags:
  <<: *docker_template
  script:
    - docker build --pull -t "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}" .
    - docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /^v\d+\.\d+\.\d+$/'

docker-branches:
  <<: *docker_template
  script:
    - docker build --pull -t "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}" .
    - docker push "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}"
  rules:
    - if: $CI_COMMIT_BRANCH
