# Logging configuration
logging:
  # Console logging settings
  console: info
  # Timestamp formatting in log entries
  lineDateFormat: "MMM-D HH:mm:ss.SSS"
  # Files to write logs to. Written files will be rotated.
  files:
    - file: "/dev/null" # Path of the log file
      # Amount of rotated log files to keep, or maximum age in days if d is appended
      maxFiles: "14d"
      # Maximum size of a log file.
      # Can be number of bytes, or number of kb, mb, or gb if k, m or g is appended
      maxSize: "50m"
      # The date format used for rotating.
      # e.g. 'HH' results in 24 log files that are picked up and appended each day
      datePattern: "YYYY-MM-DD"

# Webserver config
webserver:
  # The host where the webserver should listen to
  host: localhost
  # The port where the webserver should listen to
  port: 9740

session:
  # How many milliseconds before an auth session expires
  timeout: 3600000

# How user names should be mapped to matrix IDs
usernameMapper:
  # In which mode to operate, can be "PLAIN" or "HMAC-SHA256"
  mode: HMAC-SHA256
  # the pepper to hash the usernames with when using the HMAC-SHA256 mode
  pepper: <random secret>
  # The folder where the levelup database containing stored username mapping should be placed
  folder: ./usernamemap
  # Set to false if persistent IDs should be UTF-8 decoded (defaults to false if unset)
  binaryPid: true

# Information about the proxied matrix homeserver
homeserver:
  # Domain of the homeserver
  domain: famedly.de
  # The reachable, local, URL of the homeserver
  url: http://localhost:8008
  # The reachable, external URL of the homeserver. Defaults to https://{domain} when unset.
  base: https://matrix.myserver.net
  # Settings for the homeserver's synapse token login
  token:
    # The shared secret for the homeserver's tokens
    secret: <random secret>
    # The algorithm used for the homeserver's tokens
    algorithm: HS512
    # How long JWTs generated by UIA Proxy should be valid, in milliseconds
    expires: 120000

# Here we configure the different UIA endpoints
uia:
  # Config for the /login endpoint. We define a YAML anchor so the endpoint's configuration can be reused
  login: &default
    # Rate limit configuration for this endpoint (optional)
    rateLimit:
      # whether rate limiting is enabled
      enabled: true
      # the window in ms for the rate limiting to happen
      windowMs: 60000
      # how many hits within that window are allowed
      max: 5
    # All the stages needed to complete to fulfill UIA
    stages:
      # We define an anchor for the stage configuration
      m.login.password: &password_ldap
        # m.login.password configures password providers
        passwordproviders:
          # Use the ldap password provider
          ldap:
            # the URL ldap is reachable at
            url: ldap://localhost
            # the base DN of the ldap
            base: dc=localhost,dc=localdomain,
            # the DN of the search user to initially bind with
            bindDn: uid=search,ou=users,dc=localhost,dc=localdomain
            # the bind password of the search user
            bindPassword: super secret
            # the base DN for all user searches
            userBase: ou=users,dc=localhost,dc=localdomain
            # the filter to apply when searching for the user entry
            userFilter: "(&(uid=%s)(&(objectClass=inetOrgPerson)(enabled=TRUE)))"
            # The filter to apply when searching using persistentID
            pidFilter: "(&(pid=%s)(&(employeeType=contractor)))"
            # Allow connection when the server certificate is unknown
            allowUnauthorized: false
            # the attribute mapping of the ldap
            attributes:
              # the username for people to log in as
              uid: uid
              # the persistent ID to create the mxid hashes of
              persistentId: persistentId
              displayname: displayname
              # The admin status of the user. Ignored if not present.
              admin: admin
              # Whether the user is active or has been deactivated.
              enabled: enabled
      m.login.dummy:
        # and, just as an example (m.login.dummy doesn't take any config), here is a config option
        #foo: bar
    # And now here is the config for all the different flows possible
    flows:
      - stages:
        # First we want the user to fulfill the password flow
        - m.login.password
        # Next we want the user to fulfill the dummy flow
        - m.login.dummy
  # Here we reuse an anchored stage definition
  password:
    stages:
      m.login.password: *password_ldap
    flows:
      - stages:
        - m.login.password
  # Here we reuse an anchored node for the whole endpoint configuration
  deleteDevice: *default
  deleteDevices: *default
  uploadDeviceSigningKeys: *default
